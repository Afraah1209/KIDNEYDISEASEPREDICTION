# -*- coding: utf-8 -*-
"""Kidney_disease.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1e8tZ2BlIwGU2XcuThu-L-W7r5vuhHYY6
"""

!pip install mlflow

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn import metrics
from sklearn.neural_network import MLPClassifier
from sklearn.preprocessing import StandardScaler, LabelEncoder
import pickle  # Using pickle instead of joblib

# Load dataset
kidney_df = pd.read_csv('/content/new_model.csv')

# Display dataset description
print(kidney_df.head())
print(kidney_df.columns)

# Data Cleaning
print(f"Duplicate rows: {kidney_df.duplicated().sum()}")
print(kidney_df.isnull().sum())

# Encode only categorical columns
label_encoders = {}
categorical_cols = ['Rbc', 'Htn', 'Class']

for col in categorical_cols:
    le = LabelEncoder()
    kidney_df[col] = le.fit_transform(kidney_df[col])
    label_encoders[col] = le

# Feature columns and Target
X = kidney_df.drop('Class', axis=1)
y = kidney_df['Class']

# Splitting data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Feature Scaling
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Model Building
mlp = MLPClassifier(hidden_layer_sizes=(100,), max_iter=1000, random_state=42)

# Train the model
mlp.fit(X_train_scaled, y_train)

# Make predictions
y_pred = mlp.predict(X_test_scaled)

# Evaluation
accuracy = metrics.accuracy_score(y_test, y_pred)
precision = metrics.precision_score(y_test, y_pred, average='weighted')
recall = metrics.recall_score(y_test, y_pred, average='weighted')
f1 = metrics.f1_score(y_test, y_pred, average='weighted')

print(f"Accuracy: {accuracy:.2f}")
print(f"Precision: {precision:.2f}")
print(f"Recall: {recall:.2f}")
print(f"F1 Score: {f1:.2f}")

# Save everything into a single pickle file
model_package = {
    'model': mlp,
    'scaler': scaler,
    'label_encoders': label_encoders
}

with open("kidney_disease_model.pkl", "wb") as file:
    pickle.dump(model_package, file)

print("Everything saved into 'kidney_disease_model.pkl'!")

# Confusion Matrix
cm = metrics.confusion_matrix(y_test, y_pred)
metrics.ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=mlp.classes_).plot()

# Save scaler separately as pickle
with open("scaler.pkl", "wb") as file:
    pickle.dump(scaler, file)

print("Scaler saved as 'scaler.pkl'!")